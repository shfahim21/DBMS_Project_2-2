// src/components/CategoryModal.jsx
import { useState, useEffect } from 'react';
import axios from 'axios';

export function CategoryModal({ category, onClose, onSave }) {
  const [formData, setFormData] = useState({
    name: '',
    description: ''
  });

  useEffect(() => {
    if (category) {
      setFormData({
        name: category.name,
        description: category.description || ''
      });
    }
  }, [category]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const url = category 
        ? `/api/categories/${category.category_id}`
        : '/api/categories';
      const method = category ? 'put' : 'post';
      
      await axios[method](url, formData);
      onSave();
      onClose();
    } catch (error) {
      console.error('Error saving category:', error);
    }
  };

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <h3>{category ? 'Edit Category' : 'Add New Category'}</h3>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label className="form-label">Name *</label>
            <input
              className="form-input"
              value={formData.name}
              onChange={(e) => setFormData({...formData, name: e.target.value})}
              required
            />
          </div>

          <div className="form-group">
            <label className="form-label">Description</label>
            <textarea
              className="form-input"
              value={formData.description}
              onChange={(e) => setFormData({...formData, description: e.target.value})}
              rows="3"
            />
          </div>

          <div className="form-group" style={{ marginTop: '20px' }}>
            <button type="button" className="button" onClick={onClose}>
              Cancel
            </button>
            <button type="submit" className="button button-primary" style={{ marginLeft: '10px' }}>
              Save
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
// src/components/index.js
export * from './AuthorsSection';
export * from './CategoriesSection';
export * from './CustomersSection'; // Note plural form
export * from './AuthorModal';
export * from './CategoryModal';
export * from './CustomerModal';
export * from './DataTable';
export * from './SearchBar';// src/components/DataTable.jsx
export function DataTable({ columns, data }) {
    return (
      <div className="table-wrapper">
        <table className="data-table">
          <thead>
            <tr>
              {columns.map((column) => (
                <th key={column.accessor} className="data-table-header">
                  {column.header}
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {data.map((item) => (
              <tr key={item[columns[0].accessor]} className="data-table-row">
                {columns.map((column) => (
                  <td key={column.accessor} className="data-table-cell">
                    {column.render ? column.render(item) : item[column.accessor]}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    );
  }// src/components/AuthorsSection.jsx
import { useState, useEffect } from 'react';
import axios from 'axios';
import { AuthorModal } from './AuthorModal';

export function AuthorsSection() {
  const [authors, setAuthors] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingAuthor, setEditingAuthor] = useState(null);

  useEffect(() => {
    fetchAuthors();
  }, []);

  const fetchAuthors = async () => {
    try {
      const response = await axios.get('/api/authors');
      setAuthors(response.data);
    } catch (error) {
      console.error('Error fetching authors:', error);
    }
  };

  const filteredAuthors = authors.filter(author =>
    `${author.first_name} ${author.last_name}`.toLowerCase().includes(searchQuery.toLowerCase()) ||
    author.email.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const handleDelete = async (id) => {
    if (window.confirm('Are you sure you want to delete this author?')) {
      try {
        await axios.delete(`/api/authors/${id}`);
        fetchAuthors();
      } catch (error) {
        console.error('Error deleting author:', error);
      }
    }
  };

  return (
    <div>
      <div className="search-add-container">
        <input
          type="text"
          placeholder="Search authors..."
          className="search-input"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
        <button 
          className="button button-primary"
          onClick={() => setIsModalOpen(true)}
        >
          Add Author
        </button>
      </div>

      <table className="data-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email</th>
            <th>Birth Date</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {filteredAuthors.map(author => (
            <tr key={author.author_id}>
              <td>{author.author_id}</td>
              <td>{author.first_name}</td>
              <td>{author.last_name}</td>
              <td>{author.email}</td>
              <td>{author.birth_date}</td>
              <td>
                <button
                  className="button button-primary"
                  onClick={() => {
                    setEditingAuthor(author);
                    setIsModalOpen(true);
                  }}
                >
                  Edit
                </button>
                <button
                  className="button button-error"
                  onClick={() => handleDelete(author.author_id)}
                >
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {isModalOpen && (
        <AuthorModal
          author={editingAuthor}
          onClose={() => {
            setIsModalOpen(false);
            setEditingAuthor(null);
          }}
          onSave={fetchAuthors}
        />
      )}
    </div>
  );
}
// src/components/CustomerModal.jsx
import { useState, useEffect } from 'react';
import axios from 'axios';

export function CustomerModal({ customer, onClose, onSave }) {
  const [formData, setFormData] = useState({
    first_name: '',
    last_name: '',
    email: '',
    phone: '',
    address: ''
  });

  useEffect(() => {
    if (customer) {
      setFormData({
        first_name: customer.first_name,
        last_name: customer.last_name,
        email: customer.email,
        phone: customer.phone || '',
        address: customer.address || ''
      });
    }
  }, [customer]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const url = customer 
        ? `/api/customers/${customer.customer_id}`
        : '/api/customers';
      const method = customer ? 'put' : 'post';
      
      await axios[method](url, formData);
      onSave();
      onClose();
    } catch (error) {
      console.error('Error saving customer:', error);
    }
  };

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <h3>{customer ? 'Edit Customer' : 'Add New Customer'}</h3>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label className="form-label">First Name *</label>
            <input
              className="form-input"
              value={formData.first_name}
              onChange={(e) => setFormData({...formData, first_name: e.target.value})}
              required
            />
          </div>

          <div className="form-group">
            <label className="form-label">Last Name *</label>
            <input
              className="form-input"
              value={formData.last_name}
              onChange={(e) => setFormData({...formData, last_name: e.target.value})}
              required
            />
          </div>

          <div className="form-group">
            <label className="form-label">Email *</label>
            <input
              className="form-input"
              type="email"
              value={formData.email}
              onChange={(e) => setFormData({...formData, email: e.target.value})}
              required
            />
          </div>

          <div className="form-group">
            <label className="form-label">Phone</label>
            <input
              className="form-input"
              type="tel"
              value={formData.phone}
              onChange={(e) => setFormData({...formData, phone: e.target.value})}
            />
          </div>

          <div className="form-group">
            <label className="form-label">Address</label>
            <textarea
              className="form-input"
              value={formData.address}
              onChange={(e) => setFormData({...formData, address: e.target.value})}
              rows="3"
            />
          </div>

          <div className="form-group" style={{ marginTop: '20px' }}>
            <button type="button" className="button" onClick={onClose}>
              Cancel
            </button>
            <button type="submit" className="button button-primary" style={{ marginLeft: '10px' }}>
              Save
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
// src/components/AuthorModal.jsx
import { useState, useEffect } from 'react';
import axios from 'axios';

export function AuthorModal({ author, onClose, onSave }) {
  const [formData, setFormData] = useState({
    first_name: '',
    last_name: '',
    email: '',
    birth_date: ''
  });

  useEffect(() => {
    if (author) {
      setFormData({
        first_name: author.first_name,
        last_name: author.last_name,
        email: author.email,
        birth_date: author.birth_date
      });
    }
  }, [author]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (author) {
        await axios.put(`/api/authors/${author.author_id}`, formData);
      } else {
        await axios.post('/api/authors', formData);
      }
      onSave();
      onClose();
    } catch (error) {
      console.error('Error saving author:', error);
    }
  };

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <h3>{author ? 'Edit Author' : 'Add New Author'}</h3>
        
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label className="form-label">First Name</label>
            <input
              className="form-input"
              value={formData.first_name}
              onChange={(e) => setFormData({...formData, first_name: e.target.value})}
              required
            />
          </div>

          <div className="form-group">
            <label className="form-label">Last Name</label>
            <input
              className="form-input"
              value={formData.last_name}
              onChange={(e) => setFormData({...formData, last_name: e.target.value})}
              required
            />
          </div>

          <div className="form-group">
            <label className="form-label">Email</label>
            <input
              className="form-input"
              type="email"
              value={formData.email}
              onChange={(e) => setFormData({...formData, email: e.target.value})}
              required
            />
          </div>

          <div className="form-group">
            <label className="form-label">Birth Date</label>
            <input
              className="form-input"
              type="date"
              value={formData.birth_date}
              onChange={(e) => setFormData({...formData, birth_date: e.target.value})}
            />
          </div>

          <div className="form-group" style={{ marginTop: '20px' }}>
            <button type="button" className="button" onClick={onClose}>
              Cancel
            </button>
            <button type="submit" className="button button-primary" style={{ marginLeft: '10px' }}>
              Save
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
// src/components/CategoriesSection.jsx
import { useState, useEffect } from 'react';
import axios from 'axios';
import { SearchBar} from './SearchBar';
import { DataTable } from './DataTable';
import { CategoryModal } from './CategoryModal';

export function CategoriesSection() {
  const [categories, setCategories] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingCategory, setEditingCategory] = useState(null);

  useEffect(() => {
    fetchCategories();
  }, []);

  const fetchCategories = async () => {
    try {
      const response = await axios.get('/api/categories');
      setCategories(response.data);
    } catch (error) {
      console.error('Error fetching categories:', error);
    }
  };

  const filteredCategories = categories.filter(category =>
    category.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const columns = [
    { header: 'ID', accessor: 'category_id' },
    { header: 'Name', accessor: 'name' },
    { header: 'Description', accessor: 'description' },
    {
      header: 'Actions',
      accessor: 'actions',
      render: (category) => (
        <div className="action-buttons">
          <button 
            className="edit-button"
            onClick={() => {
              setEditingCategory(category);
              setIsModalOpen(true);
            }}
          >
            Edit
          </button>
          <button
            className="delete-button"
            onClick={() => handleDelete(category.category_id)}
          >
            Delete
          </button>
        </div>
      ),
    },
  ];

  const handleDelete = async (id) => {
    if (window.confirm('Are you sure you want to delete this category?')) {
      try {
        await axios.delete(`/api/categories/${id}`);
        fetchCategories();
      } catch (error) {
        console.error('Error deleting category:', error);
      }
    }
  };

  return (
    <div className="section-container">
      <div className="search-add-container">
        <SearchBar value={searchQuery} onChange={setSearchQuery} />
        <button 
          className="add-button"
          onClick={() => setIsModalOpen(true)}
        >
          Add Category
        </button>
      </div>

      <DataTable columns={columns} data={filteredCategories} />

      {isModalOpen && (
        <CategoryModal
          category={editingCategory}
          onClose={() => {
            setIsModalOpen(false);
            setEditingCategory(null);
          }}
          onSave={fetchCategories}
        />
      )}
    </div>
  );
}
// src/components/SearchBar.jsx
export function SearchBar({ value, onChange }) {
    return (
      <div className="search-container">
        <input
          type="text"
          placeholder="Search..."
          className="search-input"
          value={value}
          onChange={(e) => onChange(e.target.value)}
        />
      </div>
    );
  }
// src/components/CustomersSection.jsx
import { useState, useEffect } from 'react';
import axios from 'axios';
import { SearchBar} from './SearchBar';
import { DataTable } from './DataTable';
import { CustomerModal } from './CustomerModal';

export function CustomersSection() {
  const [customers, setCustomers] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingCustomer, setEditingCustomer] = useState(null);

  useEffect(() => {
    fetchCustomers();
  }, []);

  const fetchCustomers = async () => {
    try {
      const response = await axios.get('/api/customers');
      setCustomers(response.data);
    } catch (error) {
      console.error('Error fetching customers:', error);
    }
  };

  const filteredCustomers = customers.filter(customer =>
    `${customer.first_name} ${customer.last_name}`.toLowerCase().includes(searchQuery.toLowerCase()) ||
    customer.email.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const columns = [
    { header: 'ID', accessor: 'customer_id' },
    { header: 'First Name', accessor: 'first_name' },
    { header: 'Last Name', accessor: 'last_name' },
    { header: 'Email', accessor: 'email' },
    { header: 'Phone', accessor: 'phone' },
    { header: 'Address', accessor: 'address' },
    {
      header: 'Actions',
      accessor: 'actions',
      render: (customer) => (
        <div className="action-buttons">
          <button 
            className="edit-button"
            onClick={() => {
              setEditingCustomer(customer);
              setIsModalOpen(true);
            }}
          >
            Edit
          </button>
          <button
            className="delete-button"
            onClick={() => handleDelete(customer.customer_id)}
          >
            Delete
          </button>
        </div>
      ),
    },
  ];

  const handleDelete = async (id) => {
    if (window.confirm('Are you sure you want to delete this customer?')) {
      try {
        await axios.delete(`/api/customers/${id}`);
        fetchCustomers();
      } catch (error) {
        console.error('Error deleting customer:', error);
      }
    }
  };

  return (
    <div className="section-container">
      <div className="search-add-container">
        <SearchBar value={searchQuery} onChange={setSearchQuery} />
        <button 
          className="add-button"
          onClick={() => setIsModalOpen(true)}
        >
          Add Customer
        </button>
      </div>

      <DataTable columns={columns} data={filteredCustomers} />

      {isModalOpen && (
        <CustomerModal
          customer={editingCustomer}
          onClose={() => {
            setIsModalOpen(false);
            setEditingCustomer(null);
          }}
          onSave={fetchCustomers}
        />
      )}
    </div>
  );
}